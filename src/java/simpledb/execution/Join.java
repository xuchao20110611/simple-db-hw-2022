package simpledb.execution;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p_;
    private OpIterator child1_;
    private OpIterator child2_;
    private Tuple t1_;// store the current tuple of child1_

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        p_ = p;
        child1_ = child1;
        child2_ = child2;
        t1_ = null;
    }

    public JoinPredicate getJoinPredicate() {
        return p_;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {

        try {
            return child1_.getTupleDesc().getFieldName(p_.getField1());
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        try {
            return child2_.getTupleDesc().getFieldName(p_.getField2());
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1_.getTupleDesc(), child2_.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        child1_.open();
        child2_.open();
        t1_ = null;
    }

    public void close() {
        super.close();
        child1_.close();
        child2_.close();
        t1_ = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1_.rewind();
        child2_.rewind();
        t1_ = null;

    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (t1_ == null) {
            if (child1_.hasNext()) {
                t1_ = child1_.next();
            }
        }
        while (child2_.hasNext()) {
            Tuple t2 = child2_.next();
            if (p_.filter(t1_, t2)) {
                Tuple new_tuple = new Tuple(TupleDesc.merge(t1_.getTupleDesc(), t2.getTupleDesc()));
                int index = 0;
                for (int i = 0; i < t1_.getTupleDesc().numFields(); i++) {
                    new_tuple.setField(index++, t1_.getField(i));
                }
                for (int i = 0; i < t2.getTupleDesc().numFields(); i++) {
                    new_tuple.setField(index++, t2.getField(i));
                }
                /* attention: no RecordId */
                return new_tuple;
            }
        }

        while (child1_.hasNext()) {
            t1_ = child1_.next();
            child2_.rewind();
            while (child2_.hasNext()) {
                Tuple t2 = child2_.next();
                if (p_.filter(t1_, t2)) {
                    Tuple new_tuple = new Tuple(TupleDesc.merge(t1_.getTupleDesc(), t2.getTupleDesc()));
                    int index = 0;
                    for (int i = 0; i < t1_.getTupleDesc().numFields(); i++) {
                        new_tuple.setField(index++, t1_.getField(i));
                    }
                    for (int i = 0; i < t2.getTupleDesc().numFields(); i++) {
                        new_tuple.setField(index++, t2.getField(i));
                    }
                    /* attention: no RecordId */
                    return new_tuple;
                }
            }

        }

        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] { child1_, child2_ };
    }

    @Override
    public void setChildren(OpIterator[] children) {
        child1_ = children[0];
        child2_ = children[1];
    }

}
